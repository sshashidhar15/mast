#!groovy

/*
* Jenkins shared library
*/
@Library('utils@v1.0.1') _
@Library('ecs-jenkins-lib@v1.0.0') awsECS
@Library('DevOps') ops

/* Method for creating LB rules */

def createALBListenerRule(listenerArn, priority, comHost, euHost, tradingHost, targetGroupArn, region) {
    return sh(returnStatus: true, script: """
                                    /usr/local/bin/aws elbv2 create-rule \
                                    --listener-arn ${listenerArn} \
                                    --priority ${priority} \
                                    --conditions Field=host-header,Values='["${comHost}", "${euHost}", "${tradingHost}"]' \
                                    --actions Type=forward,TargetGroupArn=${targetGroupArn} \
                                    --region ${region}
                                """)
}
/* Method to get Cloudfront Distribution */
def CF_DIST_ID

/* Method to get Cloudfront Distribution */

def getCfDistId(environment) {

    if ("${environment}" == "staging") {
        return ["E1VIJGD6DWMQ2X"]
    }
    if ("${environment}" == "staging2"){
        return ["E2GQ48H0NF6MKY"]
    }
    else {
        return ["E2HP5IQZZ187QJ", "E2KIGCO0QS5481", "E3DFJ6V59EZ1N3", "E3R7SS9M05XZBO"]
    }
}

def registerTD(taskFamily, taskName, memoryReservation, image, tag, containerPort, redisHostValue, regHost, dataRedis, region) {
    return sh(returnStatus: true, script: """
                            /usr/local/bin/aws ecs register-task-definition --network-mode bridge \
                            --family ${taskFamily} \
                            --container-definitions '[{"name":"${taskName}", \
                                                    "image":"${image}", \
                                                     "memoryReservation": ${memoryReservation}, \
                                                     "logConfiguration": {"logDriver": "fluentd", "options": {"tag": "${tag}"}}, \
                                                     "portMappings":[{"containerPort":${containerPort}, "protocol":"tcp"}], \
                                                     "environment": [{"name": "REDIS_DB_HOST","value": "${redisHostValue}"},{"name": "REDIS_DB_PORT","value": "6379"},{"name": "REG_HOST_1","value": "${regHost}"},{"name": "REG_HOST_2","value": "${regHost}"},{"name": "DATA-REDIS","value": "${dataRedis}"}]}]' \
                                                      --region "${region}"
                        """)
}

def devDeploy(cluster, service, task_family, image, redisHost, regHost, dataRedis, region, boolean is_wait = true, String awscli = "aws") {
    sh """
        OLD_TASK_DEF=\$(${awscli} ecs describe-task-definition \
                                --task-definition ${task_family} \
                                --output json --region ${region})
        OLD_TASK_DEF=\$(echo \$OLD_TASK_DEF | \
                    jq --arg IMAGE ${image} '.taskDefinition.containerDefinitions[0].image=\$IMAGE')
        NEW_TASK_DEF=\$(echo \$OLD_TASK_DEF | \
                    jq --argjson ENV_PARAMS '[{"name": "REDIS_DB_HOST","value": "${redisHost}"},{"name": "REDIS_DB_PORT","value": "6379"},{"name": "REG_HOST_1","value": "${regHost}"},{"name": "REG_HOST_2","value": "${regHost}"},{"name": "DATA-REDIS","value": "${dataRedis}"}]' '.taskDefinition.containerDefinitions[0].environment=\$ENV_PARAMS')
        FINAL_TASK=\$(echo \$NEW_TASK_DEF | \
                    jq '.taskDefinition | \
                            {family: .family, \
                            networkMode: .networkMode, \
                            volumes: .volumes, \
                            containerDefinitions: .containerDefinitions, \
                            placementConstraints: .placementConstraints}')
                            
        ${awscli} ecs register-task-definition \
                --family ${task_family} \
                --cli-input-json \
                "\$(echo \$FINAL_TASK)" --region "${region}"    
        if [ \$? -eq 0 ]
        then
            echo "New task has been registered"
        else
            echo "Error in task registration"
            exit 1
        fi
        
        echo "Now deploying new version..."
                    
        ${awscli} ecs update-service \
            --cluster ${cluster} \
            --service ${service} \
            --force-new-deployment \
            --task-definition ${task_family} \
            --region "${region}"
        
        if ${is_wait}; then
            echo "Waiting for deployment to reflect changes"
            ${awscli} ecs wait services-stable \
                --cluster ${cluster} \
                --service ${service} \
                --region "${region}"
        fi
    """
}

def devCreateECSService(name, cluster, taskFamily, desiredCount, tgArn, taskName, containerPort, region) {
    sh(returnStatus: true, script: """
                                /usr/local/bin/aws ecs create-service \
                                --service-name ${name} \
                                --launch-type EC2 \
                                --cluster ${cluster} \
                                --task-definition ${taskFamily} \
                                --desired-count ${desiredCount} \
                                --placement-strategy '[{"type":"binpack",
                                                        "field":"memory"}, \
                                                       {"type":"spread", \
                                                        "field":"attribute:ecs.availability-zone"}]' \
                                --health-check-grace-period-seconds 600 \
                                --load-balancers '[{"targetGroupArn":"${tgArn}", \
                                                "containerName":"${taskName}", \
                                                "containerPort":${containerPort}}]' \
                                --role ecsServiceRole \
                                --region ${region}
                            """)
}

// Pipeline
pipeline {
    agent any

    // Parameters to be passed
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging','staging2', 'prod'], description: 'Choose an environment.')
        choice(name: 'REDIS_HOST', choices: ['dev-registration-redis.icmarkets.com', 'staging-registration-redis.icmarkets.com', 'prod-redis.icmarkets.com'], description: 'Choose redis host.')
    }

    // Pipeline options
    options {
        timeout(time: 1, unit: 'HOURS')
        ansiColor('xterm')
    }

    // Environment specific parameters to be used throughout the pipeline
    environment {

        // Application specific parameters
        APPLICATION = "www2"
        AWS_VERSION = "${env.TAG}"
        DOCKER_HUB_VERSION = "${env.APPLICATION}_${env.TAG}"
        BRANCH = "${helper.parseBranchFromTag("${env.AWS_VERSION}")}"

        // Platform on which application needs to be deployed
        boolean IS_GLOBAL = "${params.PLATFORM}".contains("GLOBAL")
        boolean IS_CHINA = "${params.PLATFORM}".contains("CHINA")
        boolean IS_RUSSIA = "${params.PLATFORM}".contains("RUSSIA")

        boolean IS_DEV_ENV = "${params.ENVIRONMENT}".contains("dev")

        // AWS specific parameters
        CLUSTER_NAME = "icm-${params.ENVIRONMENT}-cluster"
        SERVICE_NAME = "icm-${params.ENVIRONMENT}-${env.APPLICATION}-service"
        TASK_FAMILY = "icm-${params.ENVIRONMENT}-${env.APPLICATION}"
        ECS_IMAGE_TO_DEPLOY = "${env.ICM_ECR_REPO_URL}/${APPLICATION}:${env.AWS_VERSION}"

        // Docker hub specific parameters
        DOCKER_HUB_REPO_ENDPOINT = "naryanjoshi/icm"
        DOCKER_HUB_IMAGE_TO_DEPLOY = "${env.DOCKER_HUB_REPO_ENDPOINT}:${env.APPLICATION}_${env.AWS_VERSION}"

        // Aliyun specific parameters
        KUBERNETES_MASTER_HOST = "k8-master.icm"
        ALIYUN_CRED_ID = "jenkins"

        // RUSSIA's CROC specific config
        CROC_SSH_USER = "ec2-user"
        CROC_SSH_HOST = "217.73.63.210"
        CROC_DOCKER_COMPOSE_FILE = "/home/ec2-user/www2/docker-compose.yml"
        CROC_SSH_ID = "CROC_CLOUD"

        // dev config
        VPC = "vpc-bb8321d3"
        ALB_ARN = "arn:aws:elasticloadbalancing:eu-west-2:466803351965:loadbalancer/app/icm-dev-lb/02aa38573ac93bed"
        DEV_ALB_HTTP_LISTENER_ARN = "arn:aws:elasticloadbalancing:eu-west-2:466803351965:listener/app/icm-dev-lb/02aa38573ac93bed/2c8b1efb4e0c4dc2"
        DEV_ALB_HTTPS_LISTENER_ARN = "arn:aws:elasticloadbalancing:eu-west-2:466803351965:listener/app/icm-dev-lb/02aa38573ac93bed/f777b76b6ff73aae"
        COM_SITE_HOST = "${env.ENVIRONMENT}-${env.APPLICATION}-${env.BRANCH}.internal.icmarkets.com".toLowerCase()
        EU_SITE_HOST = "${env.ENVIRONMENT}-${env.APPLICATION}-${env.BRANCH}.internal.icmarkets.eu".toLowerCase()
       // TRUE_SITE_HOST = "${env.ENVIRONMENT}-${env.APPLICATION}-${env.BRANCH}.internal.trueecn.com".toLowerCase()
        TRADING_SITE_HOST = "${env.ENVIRONMENT}-${env.APPLICATION}-${env.BRANCH}.internal.trueecntrading.com".toLowerCase()

        LOAD_BALANCER = "icm-${env.ENVIRONMENT}-lb"
        TARGET_GROUP = "icm-${env.ENVIRONMENT}-${env.APPLICATION}-${env.BRANCH}"

    }

    // Pipeline Stages
    stages {

        // Clean Jenkins workspace
        stage('Clean workspace') {
            steps {
                script {
                    log.info("Executing Stage 1: Clean workspace")

                    /* Logic starts here */

                    cleanWs()

                    /* Logic ends here */

                    log.success("Completed Stage 1: Clean workspace")
                }
            }
        }

        // Deploy to specified platforms
        stage('Deploy') {
            steps {
                script {
                    if (env.IS_GLOBAL == "true" || env.IS_CHINA == "true" || env.IS_RUSSIA == "true") {
                        log.info("Executing Stage 2: Deploy")
                        if (env.IS_GLOBAL == "true") {
                            log.info("Starting deployment for Global audience for ${env.ENVIRONMENT}")

                            /* Logic starts here */

                            if (env.IS_DEV_ENV == "true") {

                                def service = "icm-${env.ENVIRONMENT}-${env.APPLICATION}-${env.BRANCH}-svc"
                                def taskFamily = "icm-${env.ENVIRONMENT}-${env.APPLICATION}-${env.BRANCH}"
                                def taskName = "icm-${env.APPLICATION}-${env.BRANCH}"

                                def isServiceExists = awsHelper.isECSServiceExists("${env.CLUSTER_NAME}", service, "${env.ICM_AWS_DEFAULT_REGION}")

                                if (isServiceExists == 0) {
                                    log.info("Service already exists, No need to create stack.")
                                    log.info("Deploying now...")
                                    devDeploy("${env.CLUSTER_NAME}",
                                            service,
                                            taskFamily,
                                            "${env.ECS_IMAGE_TO_DEPLOY}",
                                            "${env.REDIS_HOST}",
                                            "http://${params.REG_HOST}/","${params.DATA_REDIS}",
                                            "${env.ICM_AWS_DEFAULT_REGION}",
                                            true)
                                    log.success("Deployment done.")
                                } else {
                                    log.info("New branch setup: Creating task definition now")

                                    def isTaskDefCreated = registerTD(taskFamily, taskName,
                                            128, "${env.ECS_IMAGE_TO_DEPLOY}",
                                            "www2", 8080, "${env.REDIS_HOST}",
                                            "http://${params.REG_HOST}/","${params.DATA_REDIS}",
                                            "${env.ICM_AWS_DEFAULT_REGION}")

                                    if (isTaskDefCreated != 0) {
                                        currentBuild.result = 'FAILED'
                                        error("Error while creating TaskDefinition.")
                                    }

                                    log.success("TaskDefinition created successfully.")
                                    log.info("Creating TargetGroup now.")

                                    def tgArn = awsHelper.createTargetGroup("${env.TARGET_GROUP}", "${env.VPC}", 8080,
                                            "/health", 15, 2, 2, 200, "${env.ICM_AWS_DEFAULT_REGION}")

                                    if (tgArn == "") {
                                        currentBuild.result = 'FAILED'
                                        error("Error while creating TargetGroup.")
                                    }

                                    log.success("TargetGroup created successfully.")
                                    log.info("Modifying TG attributes")

                                    def isModifiedTgAttr = awsHelper.modifyTargetGroupAttr("${tgArn}", 30, "${env.ICM_AWS_DEFAULT_REGION}")

                                    if (isModifiedTgAttr != 0) {
                                        currentBuild.result = 'FAILED'
                                        error("Error while modifying TargetGroup attributes.")
                                    }

                                    log.success("TargetGroup attributes modified successfully.")
                                    log.info("Creating LB listener now.")

                                    def priority = awsHelper.getNextALBRulePriority("${env.DEV_ALB_HTTP_LISTENER_ARN}", "${env.ICM_AWS_DEFAULT_REGION}")

                                    def isListenerRuleCreated = createALBListenerRule("${env.DEV_ALB_HTTP_LISTENER_ARN}",
                                            "${priority}", "${env.COM_SITE_HOST}", "${env.EU_SITE_HOST}", "${env.TRADING_SITE_HOST}", "${tgArn}", "${env.ICM_AWS_DEFAULT_REGION}")


                                    if (isListenerRuleCreated != 0) {
                                        currentBuild.result = 'FAILED'
                                        error("Error while creating LB HTTP listener.")
                                    }


                                    isListenerRuleCreated = createALBListenerRule("${env.DEV_ALB_HTTPS_LISTENER_ARN}",
                                            "${priority}", "${env.COM_SITE_HOST}", "${env.EU_SITE_HOST}", "${env.TRADING_SITE_HOST}", "${tgArn}", "${env.ICM_AWS_DEFAULT_REGION}")

                                    if (isListenerRuleCreated != 0) {
                                        currentBuild.result = 'FAILED'
                                        error("Error while creating LB HTTPS listener.")
                                    }

                                    log.success("LB listener created successfully.")
                                    log.info("Creating service now.")

                                    def isServiceCreated = devCreateECSService(service, "${env.CLUSTER_NAME}", taskFamily,
                                            1, "${tgArn}", taskName, 8080, "${env.ICM_AWS_DEFAULT_REGION}")

                                    if (isServiceCreated != 0) {
                                        currentBuild.result = 'FAILED'
                                        error("Error while creating service. Marking the status of build FAILED.")
                                    }
                                    log.success("Service created successfully. Waiting for service to be stable.")
                                    sleep(120) 
                                    ecs.wait("${env.CLUSTER_NAME}", service, "${env.ICM_AWS_DEFAULT_REGION}")
                                    log.success("Deployment done.")
                                }


                            } else {

                                // Deploy to ECS cluster
                                log.info("Deploying to ECS cluster...")
                                if ("${params.ENVIRONMENT}" == "staging2"){
                                    ecs.deploy("icm-staging-cluster", "${env.SERVICE_NAME}", "${env.TASK_FAMILY}",
                                        "${env.ECS_IMAGE_TO_DEPLOY}", "${env.ICM_AWS_DEFAULT_REGION}", true)
                                }
                                else{
                                    ecs.deploy("${env.CLUSTER_NAME}", "${env.SERVICE_NAME}", "${env.TASK_FAMILY}",
                                        "${env.ECS_IMAGE_TO_DEPLOY}", "${env.ICM_AWS_DEFAULT_REGION}", true)
                                }
                                log.success("Deployed to ECS cluster")

                                // Cloudfront cache invalidation
                                CF_DIST_ID = getCfDistId(params.ENVIRONMENT)
                                log.info("Invalidating cloudfront cache")
                                CF_DIST_ID.each {
                                    sh """
                                    /usr/local/bin/aws cloudfront create-invalidation \
                                        --distribution-id=${it} \
                                        --paths "/*"
                                    """
                                }
                                log.success("Cloudfront cache invalidation completed")
                            }
                            /* Logic ends here */

                            log.success("Deployment completed for global audience")
                        }
                        if (env.IS_CHINA == "true" && env.ENVIRONMENT == "prod") {
                            log.info("Starting deployment for China audience")

                            /* HA cluster logic start */
                            log.info("Deploying to kubernetes cluster in Aliyun-HA")

                            commandToExecute= "/usr/bin/kubectl -n production set image deployment www2-deploy1 www21=${env.DOCKER_HUB_IMAGE_TO_DEPLOY} --record=true"

                            if ("${params.DESCRIPTION}" != "") {
                                commandToExecute += " && /usr/bin/kubectl -n production annotate deployment www2-deploy1 kubernetes.io/change-cause=\"${params.DESCRIPTION}\""
                            }

                            def isDeployChinaProxy = sh (
                                    script: commandToExecute,
                                    returnStatus: true
                            )


                            if(isDeployChinaProxy != 0) {
                                log.error("Deployment to kubernetes cluster in Aliyun failed")
                                currentBuild.result = 'FAILED'
                            }
                            else {
                                log.success("Deployed to kubernetes cluster in Aliyun")

                            }
                            /*HA cluster logic ends*/

                            log.success("Deployment completed for China audience")

                        }
                        if (env.IS_RUSSIA == "true" && env.ENVIRONMENT == "prod") {
                            log.info("Starting deployment for Russia audience")

                            log.info("Deploying to CROC cloud")

//                            withCredentials([sshUserPrivateKey(credentialsId: env.CROC_SSH_ID, keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'userName')]) {
//                                remote.user = userName
//                                remote.identityFile = identity
//                                stage("Deploy to CROC cloud") {
//                                    sshCommand remote: remote, command: command
//                                }
//                            }

                            /* Logic ends here */

                            log.success("Deployment completed for Russia audience")

                        }
                        log.success("Completed Stage 2: Deploy")
                    } else {
                        log.info("No platform selected, Skipping deploy.")
                    }
                }
            }
        }
    }

    // Post actions
    post {
        aborted {
            script {
                log.info("###############################")
                log.info('Build process is aborted')
                helper.notifySlack("warning", "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was aborted.")
                log.info("###############################")
            }
        }
        failure {
            script {
                log.error("#############################")
                log.error('Build process failed.')
                helper.notifySlack("danger", "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was failed.")
                log.error("#############################")
            }
        }
        success {
            script {
                log.success("#################################################")
                log.success('Build process completed successfully.')
                log.success("#################################################")
                if (env.IS_DEV_ENV == "true") {
                    log.success("Endpoint: \n ${env.COM_SITE_HOST}")
                    helper.notifySlack("good", "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was successful.\n URL:\n ${env.COM_SITE_HOST} ")
                    log.success("#################################################")
                } else {
                    helper.notifySlack("good", "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was successful.")
                }
            }
        }
    }
}


